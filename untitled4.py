# -*- coding: utf-8 -*-
"""
Created on Tue Aug 17 10:10:16 2021

@author: Frederik Wieder
"""

import numpy as np
from flux_class_vecs import flux_cone

tol = 1e-12
digits = 12

model = flux_cone.from_sbml("./Biomodels/bigg/e_coli_core.xml")
model.delete_reaction(12)

modelname = "Butanoate/kegg65"

model = flux_cone.from_kegg("./Biomodels/kegg/" + modelname)
ext = np.genfromtxt("./Biomodels/kegg/" + modelname + "_externality")
ind = np.nonzero(ext)[0][0]
    
    
    
model.stoich = np.c_[model.stoich[:,:ind],model.stoich[:,np.unique(model.stoich[:,ind:],axis=1,return_index=True)[1]+ind]]
    
model.rev = np.append(model.rev[:ind],model.rev[np.unique(model.stoich[:,ind:],axis=1,return_index=True)[1]+ind],axis=0)
    
model.irr = np.append(model.irr[:ind],model.irr[np.unique(model.stoich[:,ind:],axis=1,return_index=True)[1]+ind],axis=0)
   
if __name__ == "__main__":
    model.get_efvs("efmtool")
    model.get_geometry()
    print(len(model.efvs))
    print(len(model.generators))

    def two_gens(vector):
        efm = np.nonzero(np.round(vector,digits))[0]
        rev = np.nonzero(model.rev)[0]
        rev_zeros = []
        for reaction_index , reaction_value  in enumerate(vector):
            if np.round(reaction_value,digits) == 0 and reaction_index in rev:
                rev_zeros.append(reaction_index)
        
        for rev_zero_ind in rev_zeros:
            
            for efv in model.efvs:
                pos = model.efvs[np.where(model.efvs[:,rev_zero_ind] > tol)]
                neg = model.efvs[np.where(model.efvs[:,rev_zero_ind] < -tol)]
           
            if len(pos) > 0  and len(neg) > 0:
                for pos_efv in pos:
                    for neg_efv in neg:
                        new_vec = pos_efv[rev_zero_ind]*np.round(neg_efv,digits) - neg_efv[rev_zero_ind]*np.round(pos_efv,digits)
                        if set(np.nonzero(np.round(new_vec,digits))[0]) == set(efm):
                            
                            return True                    
    
        return False

    efvs = model.efvs
   
    
   
    gens = model.generators
    gen_efms = [tuple(np.nonzero(efv)[0]) for efv in gens]
    for i in range(len(model.efvs)):
        print(i)
        
        if not two_gens(efvs[i]):
            if tuple(np.nonzero(efvs[i])[0]) in gen_efms:
                print(i, "is not generated by two others, but is geneator")
            else:
                print("found counterexample")
                print(i)
                break
        
    